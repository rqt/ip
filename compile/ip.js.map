{
"version":3,
"file":"compile/ip.js",
"lineCount":184,
"mappings":"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",
"sources":["node_modules/https/index.js","node_modules/http/index.js","node_modules/util/index.js","node_modules/erotic/src/lib.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","node_modules/erotic/src/callback.js","node_modules/erotic/src/index.js","node_modules/url/index.js","node_modules/stream/index.js","node_modules/catchment/src/lib/index.js","node_modules/catchment/src/index.js","node_modules/zlib/index.js","node_modules/@rqt/aqt/src/lib/make-request.js","node_modules/@rqt/aqt/src/lib/index.js","node_modules/@rqt/aqt/src/index.js","node_modules/rqt/src/lib/index.js","src/depack.js","src/index.js"],
"sourcesContent":["export default https\nexport const {\n  Agent,\n  Server,\n  createServer,\n  get,\n  globalAgent,\n  request,\n} = https","export default http\nexport const {\n  Agent,\n  ClientRequest,\n  IncomingMessage,\n  METHODS,\n  OutgoingMessage,\n  STATUS_CODES,\n  Server,\n  ServerResponse,\n  createServer,\n  get,\n  globalAgent,\n  maxHeaderSize,\n  request,\n} = http","export default util\nexport const {\n  TextDecoder,\n  TextEncoder,\n  callbackify,\n  debug,\n  debuglog,\n  deprecate,\n  error,\n  format,\n  getSystemErrorName,\n  inherits,\n  inspect,\n  isArray,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  log,\n  print,\n  promisify,\n  puts,\n} = util","const getLastItem = (array) => {\n  const item = array[array.length - 1]\n  return item\n}\nconst getItemsFrom = (array, from) => array.slice(from)\n\n/**\n * Get a segment of the stack string, defaults are from = 0 and oneLine = false.\n * @param {string} stack the stack string\n * @param {number} [from=0] index from which to slice from\n * @param {boolean} [oneLine=false] Whether just first line must be returned\n * @returns {string} A stack segment starting from the specified line.\n */\nexport const getStackSegment = (stack, from = 0, oneLine = false) => {\n  if (from === 0 && !oneLine) {\n    return stack\n  }\n  const splitStack = stack\n    .split('\\n', oneLine ? from + 1 : undefined)\n  if (oneLine) {\n    const line = getLastItem(splitStack)\n    return line\n  } else {\n    const items = getItemsFrom(splitStack, from)\n    return items.join('\\n')\n  }\n}\n\n/**\n * Get the stack trace part of when the erotic function was called. Disregards\n * first two lines.\n * @param {string} stack error's stack\n * @param {boolean} [transparent] trim the top line as well\n * @returns {string} A part of stack\n */\nexport const getEntryStack = (stack, transparent = false) => {\n  const stackSegment = getStackSegment(stack, 2 + (transparent ? 1 : 0))\n  return stackSegment\n}\n\n/**\n * Get stack line of where the callback was called.\n * @param {string} stack Stack string.\n * @returns {string} Stack line.\n */\nexport const getCalleeStackLine = (stack) => {\n  const calleeStackLine = getStackSegment(stack, 2, true)\n  return calleeStackLine\n}\n\nexport const getStackHeading = message => `Error: ${message}`\n\n/**\n * Extract caller from the function's `arguments`.\n * @param {Object} args arguments\n * @returns {!Function} The caller function from `arguments.callee.caller`.\n */\nexport const getCallerFromArguments = (args) => {\n  const { callee: { caller } } = args\n  return caller\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback.\n * @param {!Function} entryCaller The function which was called at entry.\n * @param {string} entryStack The first line of the error stack to be returned\n * @param {boolean} [shadow=false] Print only entry stack.\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return /** @type {Error} */ (Object.assign(/** @type {!Object} */ (e), properties))\n  }\n\n  return cb\n}","import {\n  getEntryStack, getCallerFromArguments,\n} from './lib'\nimport { makeCallback } from './callback'\n\n/**\n * Returns a function to create an error with a stack trace starting at the line in code when the call was made by the callee.\n * @param {boolean} [transparent] Pretend as if the call to the function lead to the error, without exposing any of the internal stack.\n */\nexport default function erotic(transparent) {\n  const { stack } = new Error()\n  const caller = getCallerFromArguments(arguments)\n  const entryStack = getEntryStack(stack, transparent)\n\n  return makeCallback(caller, entryStack, transparent)\n}","export default url\nexport const {\n  URL,\n  URLSearchParams,\n  Url,\n  domainToASCII,\n  domainToUnicode,\n  format,\n  parse,\n  resolve,\n} = url","export default stream\nexport const {\n  Duplex,\n  PassThrough,\n  Readable,\n  Stream,\n  Transform,\n  Writable,\n} = stream","/**\n * Listens for the `error` event once so that when an error in _streamB_ is emitted, is is also emitted in the _streamA_.\n * @param {stream.Stream} streamA The stream that will emit an error once it's caught in the `streamB`.\n * @param {stream.Stream} streamB The stream from which the error originates.\n * @returns The stream the error is listened on, i.e., transparent to calling the `.once` method on that stream.\n */\nexport const pipeError = (streamA, streamB) => {\n  streamB\n    .once('error', e => {\n      streamA.emit('error', e)\n    })\n  return streamB\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Stream} stream.Stream\n */","import { Writable } from 'stream'\nimport erotic from 'erotic'\nimport cleanStack from '@artdeco/clean-stack'\nimport { pipeError } from './lib'\n\nfunction joinBufferData(array) {\n  return array.join('')\n}\n\n/**\n * A writable stream which collects incoming data into memory, and provides a promise to way for the stream to finish. The promise is resolved with joined chunks.\n */\nexport default class Catchment extends Writable {\n  /**\n   * Create a new catchment to pipe a readable stream into and collect all emitted data.\n   * @param {!_catchment.Options} [options] Options to pass to the `Writable` super constructor, and others shown below.\n   * @param {!stream.Readable} [options.rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n   * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n   * @example\n   *\n   * import { createReadStream } from 'fs'\n   * import Catchment from 'catchment'\n   *\n   * const rs = createReadStream('file.txt')\n   * const { promise } = new Catchment({ rs })\n   * const res = await promise\n   */\n  constructor(options) {\n    const {\n      binary = false, rs = null, ...opts\n    } = options || {}\n    /** @suppress {missingProperties} */\n    const { er = erotic(true), proxyError } = options || {}\n    const wrap = (_, e) => er(e)\n    super(/** @type {!stream.WritableOptions} */ (opts))\n    this._caughtData = []\n    this._promise = new Promise((r, j) => {\n      this.on('finish', () => {\n        let d\n        if (binary) {\n          d = Buffer.concat(this._caughtData)\n        } else {\n          d = joinBufferData(this._caughtData)\n        }\n        r(d)\n        this._caughtData = []\n      })\n      this.once('error', (e) => {\n        if (e.stack.indexOf('\\n') == -1) {\n          wrap`${e}`\n          j(e)\n        } else {\n          const stack = cleanStack(e.stack)\n          e.stack = stack\n          if (proxyError) wrap`${e}`\n          j(e)\n        }\n      })\n      if (rs) {\n        pipeError(this, rs).pipe(this)\n      }\n    })\n  }\n  _write(chunk, encoding, callback) {\n    this._caughtData.push(chunk)\n    callback()\n  }\n  /**\n   * A promise which will resolve will all data when the stream finishes.\n   * @type {Promise<string|Buffer>}\n   */\n  get promise() {\n    return this._promise\n  }\n}\n\n/**\n * Collect data into a catchment, and return results when the stream finishes.\n * @param {stream.Readable} readable A readable stream to collect all data from. If an error occurs during reading of this stream, the promise will be rejected with it.\n * @param {_catchment.CollectOptions} options Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @param {boolean} [options.proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n * @example\n *\n * import { collect } from 'catchment'\n * import { createReadStream } from 'fs'\n *\n * const rs = createReadStream(path)\n * await collect(rs, { proxyError: true })\n */\nexport const collect = async (readable, options = {}) => {\n  const { promise } = new Catchment({\n    rs: readable,\n    ...options,\n    er: erotic(true),\n  })\n  const res = await promise\n  return res\n}\n\n/* typal types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.Options} Options Options to pass to the `Writable` super constructor, and others shown below.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.Options Options to pass to the `Writable` super constructor, and others shown below.\n * @prop {!stream.Readable} [rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Readable} stream.Readable\n */\n\n/* typal types/collect.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.CollectOptions} CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @prop {boolean} [proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n */\n","export default zlib\nexport const {\n  Deflate,\n  DeflateRaw,\n  Gunzip,\n  Gzip,\n  Inflate,\n  InflateRaw,\n  Unzip,\n  Z_BEST_COMPRESSION,\n  Z_BEST_SPEED,\n  Z_BLOCK,\n  Z_BUF_ERROR,\n  Z_DATA_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_ERRNO,\n  Z_FILTERED,\n  Z_FINISH,\n  Z_FIXED,\n  Z_FULL_FLUSH,\n  Z_HUFFMAN_ONLY,\n  Z_MEM_ERROR,\n  Z_NEED_DICT,\n  Z_NO_COMPRESSION,\n  Z_NO_FLUSH,\n  Z_OK,\n  Z_PARTIAL_FLUSH,\n  Z_RLE,\n  Z_STREAM_END,\n  Z_STREAM_ERROR,\n  Z_SYNC_FLUSH,\n  Z_VERSION_ERROR,\n  constants,\n  createDeflate,\n  createDeflateRaw,\n  createGunzip,\n  createGzip,\n  createInflate,\n  createInflateRaw,\n  createUnzip,\n  deflate,\n  deflateRaw,\n  deflateRawSync,\n  deflateSync,\n  gunzip,\n  gunzipSync,\n  gzip,\n  gzipSync,\n  inflate,\n  inflateRaw,\n  inflateRawSync,\n  inflateSync,\n  unzip,\n  unzipSync,\n} = zlib","import erotic from 'erotic'\nimport { collect } from 'catchment'\nimport { createGunzip } from 'zlib'\nimport { request as Request } from 'http' // eslint-disable-line\n\n/**\n * @param {!http.IncomingMessage} res\n */\nexport const isMessageGzip = (res) => {\n  /**\n   * @suppress {checkTypes}\n   */\n  const { 'content-encoding': contentEncoding } = res.headers\n  return contentEncoding == 'gzip'\n}\n\n/**\n * @param {typeof Request} request The actual http or https request function.\n * @param {!http.RequestOptions} requestOptions\n * @param {!Object} [config] Config object.\n * @param {boolean} [config.justHeaders] only return headers as soon as available. false\n * @param {boolean} [config.binary] return binary\n * @param {boolean} [config.er] erotic callback\n */\nconst makeRequest = (request, requestOptions, config = {}) => {\n  const { justHeaders, binary, er = erotic(true) } = config\n  /** @type {!http.ClientRequest} */\n  let req\n\n  /** @type {!http.IncomingHttpHeaders} */\n  let headers\n  /** @type {{statusMessage: string, statusCode: number}} */\n  let m\n  /** @type {string|!Buffer} */\n  let body\n  let rawLength = 0\n  let byteLength = 0\n\n  const promise = new Promise((r, j) => {\n    req = request(requestOptions, async (res) => {\n      ({ headers } = res)\n      const { statusMessage, statusCode } = res\n      m = { statusMessage, statusCode }\n      if (justHeaders) {\n        res.destroy()\n        r()\n        return\n      }\n      const isGzip = isMessageGzip(res)\n\n      res.on('data', data => rawLength += data.byteLength )\n\n      const rs = isGzip\n        ? res.pipe(createGunzip())\n        : res\n\n      body = await collect(rs, { binary })\n      byteLength = body.length\n\n      r()\n    })\n      .on('error', (error) => {\n        const err = er(error)\n        j(err)\n      })\n      .on('timeout', () => {\n        req.abort()\n      })\n  }).then(() => {\n    const r = {\n      body,\n      headers,\n      ...m,\n      rawLength,\n      byteLength,\n      parsedBody: null,\n    }\n    return r\n  })\n  return { req, promise }\n}\n\nexport default makeRequest\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingMessage} http.IncomingMessage\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').ClientRequest} http.ClientRequest\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingHttpHeaders} http.IncomingHttpHeaders\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').RequestOptions} http.RequestOptions\n */","import erotic from 'erotic'\nimport makeRequest from './make-request'\n\nexport const getFormData = (form = {}) => {\n  const urlEncodedDataPairs = Object.keys(form).reduce((acc, key) => {\n    const v = form[key]\n    const p = `${encodeURIComponent(key)}=${encodeURIComponent(v)}`\n    return [...acc, p]\n  }, [])\n\n  const d = urlEncodedDataPairs.join('&').replace(/%20/g, '+')\n  return d\n}\n\nexport const getData = (type, data) => {\n  switch (type) {\n  case 'json':\n    data = JSON.stringify(data)\n    type = 'application/json'\n    break\n  case 'form':\n    data = getFormData(data)\n    type = 'application/x-www-form-urlencoded'\n    break\n  }\n  return {\n    data,\n    contentType: type,\n  }\n}\n\nexport const exec = async (request, requestOptions,\n  { data, justHeaders, binary, er = erotic(true) },\n) => {\n  const { req, promise } = makeRequest(request, requestOptions, {\n    justHeaders,\n    binary,\n    er,\n  })\n  req.end(data)\n  const res = await promise\n\n  const isJson = isHeadersJson(res.headers)\n\n  if (isJson && res.body) {\n    try {\n      res.parsedBody = JSON.parse(res.body)\n    } catch (e) {\n      const err = er(e)\n      err.response = res.body\n      throw err\n    }\n  }\n\n  return res\n}\n\n/**\n * Check if the returned content-type starts with application/json.\n * @param {!http.IncomingHttpHeaders} headers\n */\nconst isHeadersJson = (headers) => {\n  /**\n   * @suppress {checkTypes}\n   */\n  const { 'content-type': contentType = '' } = headers\n  return contentType.startsWith('application/json')\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('http').IncomingHttpHeaders} http.IncomingHttpHeaders\n */","import { request as https } from 'https'\nimport { request as http } from 'http'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\nimport { parse } from 'url'\nimport { getData, exec } from './lib'\n\nlet ua\ntry {\n  // require in index won't lead to --process_common_js_modules\n  const { 'version': version, 'name': name } = require('../package.json')\n  ua = name == '@rqt/aqt' ? `@rqt/aqt/${version}` : `@rqt/aqt via ${name}/${version}`\n} catch (err) {\n  ua = '@aqt/rqt'\n}\n\nconst LOG = debuglog('aqt')\n\n/**\n * Request a web page and return information including `headers`, `statusCode`, `statusMessage` along with the `body` (which is also parsed if JSON received).\n * @param {string} address The URL such as http://example.com/api.\n * @param {_rqt.AqtOptions} [options] Configuration for requests.\n */\nconst aqt = async (address, options = {}) => {\n  const {\n    data: d,\n    type = 'json',\n    headers: outgoingHeaders = {\n      'User-Agent': `Mozilla/5.0 (Node.JS) ${ua}`,\n    },\n    compress = true,\n    binary = false,\n    justHeaders = false,\n    method,\n    timeout,\n  } = options\n  const er = erotic(true)\n\n  const { hostname, protocol, port, path } = parse(address)\n  const isHttps = protocol === 'https:'\n  const request = isHttps ? https : http\n\n  const opts = {\n    hostname,\n    port,\n    path,\n    headers: {\n      ...outgoingHeaders,\n    },\n    timeout,\n    method,\n  }\n\n  let data\n  if (d) {\n    const _d = getData(type, d)\n      ; ({ data } = _d)\n    const { contentType } = _d\n\n    opts.method = method || 'POST'\n    if (!('Content-Type' in opts.headers)) {\n      opts.headers['Content-Type'] = contentType\n    }\n    if (!('Content-Length' in opts.headers)) {\n      opts.headers['Content-Length'] = Buffer.byteLength(data)\n    }\n  }\n  if (compress && !('Accept-Encoding' in opts.headers)) {\n    opts.headers['Accept-Encoding'] = 'gzip, deflate'\n  }\n\n  const {\n    body, headers, byteLength, statusCode, statusMessage, rawLength,\n    parsedBody,\n  } = await exec(request, opts, {\n    data,\n    justHeaders,\n    binary,\n    er,\n  })\n\n  LOG('%s %s B%s', address, byteLength, `${byteLength != rawLength ? ` (raw ${rawLength} B)` : ''}`)\n\n  /** @type {!_rqt.AqtReturn} */\n  const res = {\n    body: parsedBody ? parsedBody : body,\n    headers,\n    statusCode,\n    statusMessage,\n  }\n  return res\n}\n\nexport default aqt\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').AqtOptions} _rqt.AqtOptions\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').AqtReturn} _rqt.AqtReturn\n */","import aqt from '@rqt/aqt'\n\n/**\n * Request an HTTP page and return the response body as a string.\n * @param {string} address Url such as http://example.com/api.\n * @param {!_rqt.AqtOptions} [options] Options for requests.\n */\nexport const rqt = async (address, options = {}) => {\n  const { body } = await aqt(address, options)\n  /** @type {string} */\n  const r = body\n  return r\n}\n\n/**\n * Request an HTTP page and return the response body as an object.\n * @param {string} address Url such as http://example.com/api.\n * @param {!_rqt.AqtOptions} [options] Options for requests.\n */\nexport const jqt = async (address, options = {}) => {\n  const { body } = await aqt(address, options)\n  /** @type {*} */\n  const r = body\n  return r\n}\n\n/**\n * Request a page and return the body as a buffer.\n * @param {string} address The URL such as http://example.com/api.\n * @param {!_rqt.AqtOptions} [options] Options for requests.\n */\nexport const bqt = async (address, options) => {\n  const c = {\n    ...options,\n    binary: true,\n  }\n  const  { body } = await aqt(address, c)\n  /** @type {!Buffer} */\n  const r = body\n  return r\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@rqt/aqt').AqtOptions} _rqt.AqtOptions\n */\n\n// /**\n//  * Request a page and return the body as a stream.\n//  * @param {string} address Url such as http://example.com/api\n//  * @param {Options} [config] Options for requests.\n//  * @param {*} [config.data] Optional data to send to the server with the request.\n//  * @param {'form'|'json'} [config.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n//  * @param {http.OutgoingHttpHeaders} [config.headers] Headers to use for the request.\n//  * @param {boolean} [config.compress=true] Add the `Accept-Encoding: gzip, deflate` header to indicate to the server that it can send a compressed response. Default `true`.\n//  * @param {string} [config.method] What HTTP method to use in making of the request. When no method is given and `data` is present, defaults to `POST`.\n//  * @param {number} [config.timeout] Timeout after which the request should cancel.\n//  */\n// export const srqt = async (address, config) => {\n//   throw new Error('not implemented')\n//   // config.binary = true\n//   // const  { body } = await arqt(address, config)\n//   // return body\n// }\n","import '../types/externs'\nimport ip from './'\n\nmodule.exports = ip","import rqt from 'rqt'\n\n/**\n * Returns a public IP address of the host.\n * @param {!_rqt.IpOptions} options Options for the request.\n */\nexport default async function ip(options = {}) {\n  const {\n    host = 'https://api.ipify.org',\n  } = options\n  const res = await rqt(host)\n  return res\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../types').IpOptions} _rqt.IpOptions\n */"],
"names":["request","https","http","debuglog","util","getStackSegment","stack","from","oneLine","splitStack","split","undefined","item","length","slice","items","join","getEntryStack","transparent","stackSegment","getCallerFromArguments","args","caller","homedir","os","extractPathRegex","pathRegex","homeDir","cleanStack","pretty","ignoredModules","re","RegExp","source","replace","j","filter","x","pathMatches","match","includes","test","trim","map","m","p1","makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","arguments","errorStack","Error","calleeStackLine","message","isError","stackMessage","stackHeading","Object","assign","e","properties","erotic","parse","url","Writable","stream","pipeError","streamA","streamB","once","emit","Catchment","options","binary","rs","opts","er","proxyError","wrap","_","_caughtData","_promise","Promise","r","on","d","Buffer","concat","indexOf","pipe","chunk","encoding","callback","push","collect","readable","promise","res","createGunzip","zlib","isMessageGzip","contentEncoding","headers","makeRequest","requestOptions","config","justHeaders","req","body","rawLength","byteLength","then","statusMessage","statusCode","destroy","isGzip","data","error","err","abort","parsedBody","getFormData","form","keys","reduce","urlEncodedDataPairs","acc","key","v","p","encodeURIComponent","exec","end","contentType","startsWith","JSON","response","ua","version","name","require","LOG","aqt","address","type","outgoingHeaders","compress","method","timeout","hostname","protocol","port","path","stringify","_d","rqt","module","exports","ip","host"]
}
